/*
"가상 소멸자"

	"가상 생성자" : 상식적으로 만들어질 수 없는 개념으로 존재하지 않는다.

	"가상 소멸자" : 매우 중요하다.

					예제) 배열에 Person과 Student양 타입의 객체가 저장되기 때문에 적절한
						소멸자가 각 객체에서 호출되는 것은 중요한 일이다.
						그렇지만 소멸자가 가상이 아니라면 가각의 경우에 오직 Person 소멸자만
						호출될 것이다. 
*/


/*
"다형성"
	
	"다형성" : 객체지향 설계의 문맥에서는 다른 형태를 취하는 객체변수의 능력
			
			예제) 어떤 클래스 S를 가리키는 포인터로 선언된 변수 p는 S로부터 유도된 클래스 T에
				속한 어떤 객체라도 가리킬 수 있다


	"오버라이드" : 기본 클래스를 지나 유도된 클래스 내의 함수를 호출하는 현상

			예제) 이 두 클래스(S,T)에 a()라는 가상함수가 존재한다고 가정할 시,
				p -> a()를 호출 할때 어떤 함수가 호출이 될까?
				동적 바인딩이 사용할 경우, p가 T 타입의 객체를 가리킨다면 T::a()가 호출된다.
				이 경우 T가 S로부터 a() 함수를 오버라이드 했다고 말한다.


				이처럼 다형성은 p -> a()의 호출자가 함수 a()가 정확하게 실행되기 위해
				포인터 p가 T 또는 S의 인스턴스를 참조하고 있는지를 알 필요가 없기 때문에 유용

				최소한 하나의 가상 함수를 가지는 클래스 객체를 가리키는 포인터 변수 p를 
				"다형화" 되었다고 한다.


	"특수화" : 상속을 사용하기 위한 두 개의 기본 방법 중 하나
			특수화를 사용할 경우, 일반적인 클래스를 특정한 유도된 클래스들로 특수화 가능

			예제) 함수 drink와 sniff를 가지고 있는 일반적인 Dog 클래스 
				이 클래스를 Bloodhound 클래스로 특수화하기 위해 함수 drink를 오버라이드 할 필요X
				왜냐하면 모든 개가 같은 방법으로 drink하기 때문

				하지만, sniff는 오버라이드 할 필요 있다.
				Bloodhound는 다른 개들에 비해 sniff가 뛰어나기 때문이다.

				즉, 이러한 방ㅂ법으로 Bloodhound 클래스는 기본 클래스 Dog의 함수를 툭수화한다.

	
	"확장" : 상속을 사용하는 또 다른 방법
			기본 클래스 함수를 위해 작성된 코드를 재활용한다.
			그러나 기본 클래스에 없다면 기능을 추가하여 새로운 함수를 추가시킨다.
			
			예제) BorderCollie라는 클래스는 Dog 클래스의 모든 일반 함수들을 상속 받은 다음 
				새로운 함수 herd()를 추가해야 한다.
				새로운 함수의 추가를 토앟여 우리는 일반적인 Dog 클래스의 확장을 이끌었다.



*/
